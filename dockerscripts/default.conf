init_by_lua 'sites = os.getenv("SITES")';

server {
  set_by_lua $SITES 'return sites';
  array_split ',' $SITES to=$sites;

  listen 80 default_server;
  listen [::]:80 default_server;

  location / {
    content_by_lua_block {
      local host = ngx.var.host
      local uri = ngx.var.uri

      if string.match(uri, '%.[^%.]+$') == nil then
        if string.match(uri, '/$') == nil then
          ngx.exec("/data/" .. host .. uri .. "/index.html")
        else
          ngx.exec("/data/" .. host .. uri .. "index.html")
        end
      else
        ngx.exec("/data/" .. host .. uri)
      end
    }
  }

  location /data {
      internal;
      alias /data;
  }

  # You may need this to prevent return 404 recursion.
  location = /404.html {
    internal;
  }
}

# HTTPS server
# server {
#   listen 443 ssl;
#   listen [::]:443 ssl;
#   server_name _;

#   root /data/site;
#   index index.html;

#   # Since index is single point of entry, we must make sure clients always have the latest version
#   location ~* \.html$ {
#     add_header Cache-Control "no-cache, no-store, must-revalidate";
#   }

#   # You may need this to prevent return 404 recursion.
#   location = /404.html {
#     internal;
#   }

#   ssl_certificate /etc/ssl/certs/fullchain.crt;
#   ssl_certificate_key /etc/ssl/certs/certificate.key;
#   ssl_session_cache shared:SSL:10m;
#   ssl_session_timeout 5m;
#   ssl_protocols TLSv1.1 TLSv1.2;
#   ssl_prefer_server_ciphers on;
#   ssl_dhparam /etc/ssl/certs/dhparam.pem;
#   ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA:ECDHE-ECDSA-AES128-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256;
#   add_header Strict-Transport-Security "max-age=31536000; includeSubdomains";
# }

# HTTP redirect
# server {
#   listen 80;
#   listen [::]:80;
#   server_name _;

#   return 301 https://$host$request_uri;
# }
