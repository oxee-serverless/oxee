server {
  listen 443 ssl;
  listen [::]:443 ssl;
  server_name _;

  location / {
    # This block redirects any traffic to a minio bucket with the same name as the requested host
    content_by_lua_block {
      local host = ngx.var.host
      local uri = ngx.var.uri
      local path = "/data/" .. host .. uri

      -- if directory passed, try to serve index.html
      if string.match(uri, '%.[^%.]+$') == nil then
          ngx.exec(path .. (string.match(uri, '/$') == nil and "/index.html" or "index.html"))
      else
        ngx.exec(path)
      end
    }
  }

  location /data {
    internal;
    alias /data;

    # Make root index the end-all be-all in case of 404
    try_files $uri $uri/ /index.html;

    # This block makes html files non-cacheable
    # We must make sure clients always have the latest version of UI
    header_filter_by_lua_block {
      local uri = ngx.var.uri

      if string.match(uri, '%.html$') ~= nil then
        ngx.header["Cache-Control"] = "no-cache, no-store, must-revalidate";
      end
    }
  }

  # You may need this to prevent return 404 recursion.
  location = /404.html {
    internal;
  }

  ssl_certificate /etc/ssl/certs/fallback.crt;
  ssl_certificate_key /etc/ssl/certs/fallback.key;

  ssl_certificate_by_lua_block {
    local ssl = require "ngx.ssl"
    local host = ssl.server_name()
    local fchain = io.open("/etc/ssl/certs/" .. host .. "/fullchain.pem","rb")

    if fchain ~= nil then
      local fullchain = fchain:read "*a"
      fchain:close()

      local kchain = io.open("/etc/ssl/certs/" .. host .. "/key.pem","rb")
      local key = kchain:read "*a"
      kchain:close()

      -- If domain has certificates available then
      -- clear the fallback certificates and private keys
      -- set by the ssl_certificate and ssl_certificate_key
      -- directives above:
      local ok, err = ssl.clear_certs()
      if not ok then
          ngx.log(ngx.ERR, "failed to clear existing (fallback) certificates")
          return ngx.exit(ngx.ERROR)
      end
      
      local cert_chain = ssl.cert_pem_to_der(fullchain)
      local key_chain = ssl.priv_key_pem_to_der(key)
      ssl.set_der_cert(cert_chain)
      ssl.set_der_priv_key(key_chain)
    end
  }

  ssl_session_cache shared:SSL:10m;
  ssl_session_timeout 5m;
  ssl_protocols TLSv1.1 TLSv1.2;
  ssl_prefer_server_ciphers on;
  ssl_dhparam /etc/ssl/certs/dhparam.pem;
  ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA:ECDHE-ECDSA-AES128-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256;
  add_header Strict-Transport-Security "max-age=31536000; includeSubdomains";
}

# Certification server
server {
  listen 8000;
  listen [::]:8000;
  server_name _;

  location / {
    default_type text/html;
    content_by_lua_block{
      ngx.say("<h1>Certifying domain...</h1><p>The domain <strong>" .. ngx.var.host .. "</strong> will be certified shortly, please wait for the browser to redirect you automatically.</p><script>setTimeout(function(){window.location='https://" .. ngx.var.host .. "'}, 60000)</script>")
      os.execute("echo " .. ngx.var.host .. " > /run/certmon/cert.domain")
    }
  }
}

# HTTP redirect
server {
  listen 80;
  listen [::]:80;
  server_name _;

  return 301 https://$host$request_uri;
}
